import { NextResponse } from "next/server";

// Constants for Judge0 API
const JUDGE0_API_URL = process.env.JUDGE0_API_URL;
const JUDGE0_API_KEY = process.env.JUDGE0_API_KEY;

// Function to delay execution
const delay = (ms: number) => new Promise(resolve => setTimeout(resolve, ms));

// Debug environment variables
console.log("API Configuration:", {
  url: JUDGE0_API_URL,
  hasKey: !!JUDGE0_API_KEY,
});

// Language IDs for Judge0
const LANGUAGE_IDS = {
  python: 71,
  javascript: 63,
  typescript: 74,
  java: 62,
  cpp: 54,
  c: 50,
};

interface SubmissionRequest {
  source_code: string;
  language_id: number;
  stdin?: string;
  expected_output?: string;
}

// Function to get submission status
async function getSubmissionResult(token: string) {
  const resultResponse = await fetch(
    `${JUDGE0_API_URL}/submissions/${token}?base64_encoded=false&fields=status,stdout,stderr,compile_output,message,time,memory`,
    {
      headers: {
        "X-RapidAPI-Key": JUDGE0_API_KEY!,
        "X-RapidAPI-Host": "judge0-ce.p.rapidapi.com",
      },
    }
  );

  if (!resultResponse.ok) {
    throw new Error("Failed to get submission result");
  }

  return await resultResponse.json();
}

export async function POST(request: Request) {
  try {
    console.log("API Route - Request received");

    const body = await request.json();
    console.log("Request body:", body);

    const { code, language, input } = body;

    console.log("Request body:", { code, language, input });
    console.log("Environment:", {
      apiUrl: JUDGE0_API_URL,
      hasApiKey: !!JUDGE0_API_KEY,
    });

    if (!JUDGE0_API_KEY) {
      return NextResponse.json(
        { error: "Judge0 API key is not configured" },
        { status: 500 }
      );
    }

    const languageId = LANGUAGE_IDS[language as keyof typeof LANGUAGE_IDS];
    if (!languageId) {
      return NextResponse.json(
        { error: "Unsupported programming language" },
        { status: 400 }
      );
    } // Create submission
    console.log("Making submission request to Judge0");
    const submissionResponse = await fetch(`${JUDGE0_API_URL}/submissions`, {
      method: "POST",
      headers: {
        "Content-Type": "application/json",
        "X-RapidAPI-Key": JUDGE0_API_KEY,
        "X-RapidAPI-Host": "judge0-ce.p.rapidapi.com",
      },
      body: JSON.stringify({
        source_code: code,
        language_id: languageId,
        stdin: input || "",
      } as SubmissionRequest),
    });

    if (!submissionResponse.ok) {
      throw new Error("Failed to create submission");
    }    const { token } = await submissionResponse.json();

    // Wait for the submission to be processed
    const maxAttempts = 10;
    let attempts = 0;
    let result;

    while (attempts < maxAttempts) {
      const resultResponse = await fetch(
        `${JUDGE0_API_URL}/submissions/${token}?base64_encoded=false&fields=status,stdout,stderr,compile_output,message,time,memory`,
        {
          headers: {
            "X-RapidAPI-Key": JUDGE0_API_KEY,
            "X-RapidAPI-Host": "judge0-ce.p.rapidapi.com",
          },
        }
      );

      if (!resultResponse.ok) {
        throw new Error("Failed to get submission result");
      }

      result = await resultResponse.json();
      
      // Check if the code has finished processing
      if (result.status && result.status.id !== 1 && result.status.id !== 2) {
        // Status is not "In Queue" or "Processing"
        break;
      }

      // Wait 1 second before trying again
      await new Promise(resolve => setTimeout(resolve, 1000));
      attempts++;

    if (!resultResponse.ok) {
      throw new Error("Failed to get submission result");
    }

    const result = await resultResponse.json();
    return NextResponse.json(result);
  } catch (error) {
    console.error("Error in code execution:", error);
    // More detailed error message for debugging
    const errorMessage = error instanceof Error ? error.message : String(error);
    return NextResponse.json(
      {
        error: "Failed to execute code",
        details: errorMessage,
        apiKey: JUDGE0_API_KEY ? "API key is set" : "API key is missing",
      },
      { status: 500 }
    );
  }
}
